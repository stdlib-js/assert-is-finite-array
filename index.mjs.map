{"version":3,"file":"index.mjs","sources":["../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is an array-like object containing only finite numbers.\n*\n* @module @stdlib/assert-is-finite-array\n*\n* @example\n* import isFiniteArray from '@stdlib/assert-is-finite-array' ;\n*\n* var bool = isFiniteArray( [ -3.0, new Number(0.0), 2.0 ] );\n* // returns true\n*\n* bool = isFiniteArray( [ -3.0, 1.0/0.0 ] );\n* // returns false\n*\n* @example\n* import { primitives as isFiniteArray } from '@stdlib/assert-is-finite-array' ;\n*\n* var bool = isFiniteArray( [ -1.0, 10.0 ] );\n* // returns true\n*\n* bool = isFiniteArray( [ -1.5, 0.0, 5.0 ] );\n* // returns true\n*\n* bool = isFiniteArray( [ -3.0, new Number(-1.0) ] );\n* // returns false\n*\n* @example\n* import { objects as isFiniteArray } from '@stdlib/assert-is-finite-array' ;\n*\n* var bool = isFiniteArray( [ new Number(1.0), new Number(3.0) ] );\n* // returns true\n*\n* bool = isFiniteArray( [ -1.0, 0.0, 3.0 ] );\n* // returns false\n*\n* bool = isFiniteArray( [ 3.0, new Number(-1.0) ] );\n* // returns false\n*/\n\n// MODULES //\n\nimport isFinite from '@stdlib/assert-is-finite' ; // eslint-disable-line stdlib/no-redeclare\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport arrayfun from '@stdlib/assert-tools-array-like-function' ;\n\n\n// VARIABLES //\n\nvar isPrimitiveArray = arrayfun( isFinite.isPrimitive );\nvar isObjectArray = arrayfun( isFinite.isObject );\n\n\n// MAIN //\n\nvar isFiniteArray = arrayfun( isFinite );\nsetReadOnly( isFiniteArray, 'primitives', isPrimitiveArray );\nsetReadOnly( isFiniteArray, 'objects', isObjectArray );\n\n\n// EXPORTS //\n\nexport default isFiniteArray;\n"],"names":["isPrimitiveArray","arrayfun","isFinite","isPrimitive","isObjectArray","isObject","isFiniteArray","setReadOnly"],"mappings":";;ySAoEA,IAAAA,EAAAC,EAAAC,EAAAC,aACAC,EAAAH,EAAAC,EAAAG,UAKAC,EAAAL,EAAAC,GACAK,EAAAD,EAAA,aAAAN,GACAO,EAAAD,EAAA,UAAAF"}